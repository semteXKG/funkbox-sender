/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_MESSAGE_PB_H_INCLUDED
#define PB_MESSAGE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _severity {
    severity_POSITIVE = 1,
    severity_NORMAL = 2,
    severity_WARN = 3,
    severity_CRIT = 4
} severity;

typedef enum _event_type {
    event_type_EVT_NONE = 1,
    event_type_EVT_LAP = 2,
    event_type_EVT_TIME_REMAIN = 3,
    event_type_EVT_STATE_CHANGE = 4
} event_type;

typedef enum _command_type {
    command_type_COM_NONE = 1,
    command_type_COM_PIT = 2,
    command_type_COM_STINT_OVER = 3,
    command_type_COM_TBD = 4
} command_type;

/* Struct definitions */
typedef struct _event {
    bool has_id;
    int32_t id;
    bool has_type;
    event_type type;
    bool has_severity;
    severity severity;
    bool has_created_at;
    int64_t created_at;
    bool has_displayed_since;
    int64_t displayed_since;
    pb_callback_t text;
} event;

typedef struct _command {
    bool has_type;
    command_type type;
    bool has_created;
    int64_t created;
    bool has_handled;
    int64_t handled;
} command;

typedef struct _car_sensor {
    bool has_temp;
    uint32_t temp;
    bool has_preassure;
    double preassure;
} car_sensor;

typedef struct _stint_data {
    bool has_running;
    bool running;
    bool has_enabled;
    bool enabled;
    bool has_target;
    int64_t target;
    bool has_elapsed;
    int64_t elapsed;
} stint_data;

typedef struct _lap {
    bool has_lap_no;
    int32_t lap_no;
    bool has_lap_time_ms;
    int64_t lap_time_ms;
} lap;

typedef struct _lap_data {
    bool has_lap_no;
    int32_t lap_no;
    bool has_best_lap;
    uint32_t best_lap;
    bool has_current_lap;
    uint32_t current_lap;
    pb_callback_t laps;
} lap_data;

typedef struct _mcu_data {
    bool has_network_time_adjustment;
    int64_t network_time_adjustment;
    bool has_water;
    car_sensor water;
    bool has_oil;
    car_sensor oil;
    bool has_gas;
    car_sensor gas;
    bool has_stint;
    stint_data stint;
    bool has_lap_data;
    lap_data lap_data;
    pb_callback_t events;
    pb_callback_t outgoing_commands;
    bool has_outgoing_commands_last_idx;
    int64_t outgoing_commands_last_idx;
    pb_callback_t incoming_commands;
    bool has_incoming_commands_last_idx;
    int64_t incoming_commands_last_idx;
} mcu_data;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _severity_MIN severity_POSITIVE
#define _severity_MAX severity_CRIT
#define _severity_ARRAYSIZE ((severity)(severity_CRIT+1))

#define _event_type_MIN event_type_EVT_NONE
#define _event_type_MAX event_type_EVT_STATE_CHANGE
#define _event_type_ARRAYSIZE ((event_type)(event_type_EVT_STATE_CHANGE+1))

#define _command_type_MIN command_type_COM_NONE
#define _command_type_MAX command_type_COM_TBD
#define _command_type_ARRAYSIZE ((command_type)(command_type_COM_TBD+1))

#define event_type_ENUMTYPE event_type
#define event_severity_ENUMTYPE severity

#define command_type_ENUMTYPE command_type







/* Initializer values for message structs */
#define event_init_default                       {false, 0, false, _event_type_MIN, false, _severity_MIN, false, 0, false, 0, {{NULL}, NULL}}
#define command_init_default                     {false, _command_type_MIN, false, 0, false, 0}
#define car_sensor_init_default                  {false, 0, false, 0}
#define stint_data_init_default                  {false, 0, false, 0, false, 0, false, 0}
#define lap_init_default                         {false, 0, false, 0}
#define lap_data_init_default                    {false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define mcu_data_init_default                    {false, 0, false, car_sensor_init_default, false, car_sensor_init_default, false, car_sensor_init_default, false, stint_data_init_default, false, lap_data_init_default, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0}
#define event_init_zero                          {false, 0, false, _event_type_MIN, false, _severity_MIN, false, 0, false, 0, {{NULL}, NULL}}
#define command_init_zero                        {false, _command_type_MIN, false, 0, false, 0}
#define car_sensor_init_zero                     {false, 0, false, 0}
#define stint_data_init_zero                     {false, 0, false, 0, false, 0, false, 0}
#define lap_init_zero                            {false, 0, false, 0}
#define lap_data_init_zero                       {false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define mcu_data_init_zero                       {false, 0, false, car_sensor_init_zero, false, car_sensor_init_zero, false, car_sensor_init_zero, false, stint_data_init_zero, false, lap_data_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define event_id_tag                             1
#define event_type_tag                           2
#define event_severity_tag                       3
#define event_created_at_tag                     4
#define event_displayed_since_tag                5
#define event_text_tag                           6
#define command_type_tag                         1
#define command_created_tag                      2
#define command_handled_tag                      3
#define car_sensor_temp_tag                      1
#define car_sensor_preassure_tag                 2
#define stint_data_running_tag                   1
#define stint_data_enabled_tag                   2
#define stint_data_target_tag                    3
#define stint_data_elapsed_tag                   4
#define lap_lap_no_tag                           1
#define lap_lap_time_ms_tag                      2
#define lap_data_lap_no_tag                      1
#define lap_data_best_lap_tag                    2
#define lap_data_current_lap_tag                 3
#define lap_data_laps_tag                        4
#define mcu_data_network_time_adjustment_tag     1
#define mcu_data_water_tag                       2
#define mcu_data_oil_tag                         3
#define mcu_data_gas_tag                         4
#define mcu_data_stint_tag                       5
#define mcu_data_lap_data_tag                    6
#define mcu_data_events_tag                      7
#define mcu_data_outgoing_commands_tag           8
#define mcu_data_outgoing_commands_last_idx_tag  9
#define mcu_data_incoming_commands_tag           10
#define mcu_data_incoming_commands_last_idx_tag  11

/* Struct field encoding specification for nanopb */
#define event_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    id,                1) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              2) \
X(a, STATIC,   OPTIONAL, UENUM,    severity,          3) \
X(a, STATIC,   OPTIONAL, INT64,    created_at,        4) \
X(a, STATIC,   OPTIONAL, INT64,    displayed_since,   5) \
X(a, CALLBACK, OPTIONAL, STRING,   text,              6)
#define event_CALLBACK pb_default_field_callback
#define event_DEFAULT (const pb_byte_t*)"\x10\x01\x18\x01\x00"

#define command_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    type,              1) \
X(a, STATIC,   OPTIONAL, INT64,    created,           2) \
X(a, STATIC,   OPTIONAL, INT64,    handled,           3)
#define command_CALLBACK NULL
#define command_DEFAULT (const pb_byte_t*)"\x08\x01\x00"

#define car_sensor_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   temp,              1) \
X(a, STATIC,   OPTIONAL, DOUBLE,   preassure,         2)
#define car_sensor_CALLBACK NULL
#define car_sensor_DEFAULT NULL

#define stint_data_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     running,           1) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,           2) \
X(a, STATIC,   OPTIONAL, INT64,    target,            3) \
X(a, STATIC,   OPTIONAL, INT64,    elapsed,           4)
#define stint_data_CALLBACK NULL
#define stint_data_DEFAULT NULL

#define lap_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    lap_no,            1) \
X(a, STATIC,   OPTIONAL, INT64,    lap_time_ms,       2)
#define lap_CALLBACK NULL
#define lap_DEFAULT NULL

#define lap_data_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    lap_no,            1) \
X(a, STATIC,   OPTIONAL, UINT32,   best_lap,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   current_lap,       3) \
X(a, CALLBACK, REPEATED, MESSAGE,  laps,              4)
#define lap_data_CALLBACK pb_default_field_callback
#define lap_data_DEFAULT NULL
#define lap_data_laps_MSGTYPE lap

#define mcu_data_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    network_time_adjustment,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  water,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  oil,               3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gas,               4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stint,             5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  lap_data,          6) \
X(a, CALLBACK, REPEATED, MESSAGE,  events,            7) \
X(a, CALLBACK, REPEATED, MESSAGE,  outgoing_commands,   8) \
X(a, STATIC,   OPTIONAL, INT64,    outgoing_commands_last_idx,   9) \
X(a, CALLBACK, REPEATED, MESSAGE,  incoming_commands,  10) \
X(a, STATIC,   OPTIONAL, INT64,    incoming_commands_last_idx,  11)
#define mcu_data_CALLBACK pb_default_field_callback
#define mcu_data_DEFAULT NULL
#define mcu_data_water_MSGTYPE car_sensor
#define mcu_data_oil_MSGTYPE car_sensor
#define mcu_data_gas_MSGTYPE car_sensor
#define mcu_data_stint_MSGTYPE stint_data
#define mcu_data_lap_data_MSGTYPE lap_data
#define mcu_data_events_MSGTYPE event
#define mcu_data_outgoing_commands_MSGTYPE command
#define mcu_data_incoming_commands_MSGTYPE command

extern const pb_msgdesc_t event_msg;
extern const pb_msgdesc_t command_msg;
extern const pb_msgdesc_t car_sensor_msg;
extern const pb_msgdesc_t stint_data_msg;
extern const pb_msgdesc_t lap_msg;
extern const pb_msgdesc_t lap_data_msg;
extern const pb_msgdesc_t mcu_data_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define event_fields &event_msg
#define command_fields &command_msg
#define car_sensor_fields &car_sensor_msg
#define stint_data_fields &stint_data_msg
#define lap_fields &lap_msg
#define lap_data_fields &lap_data_msg
#define mcu_data_fields &mcu_data_msg

/* Maximum encoded size of messages (where known) */
/* event_size depends on runtime parameters */
/* lap_data_size depends on runtime parameters */
/* mcu_data_size depends on runtime parameters */
#define MESSAGE_PB_H_MAX_SIZE                    stint_data_size
#define car_sensor_size                          15
#define command_size                             24
#define lap_size                                 22
#define stint_data_size                          26

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
